# How does React work?

-> React is a JavaScript library that follows a component-based architecture and optimizes UI updates using the Virtual DOM.
Instead of directly updating the Real DOM (which is slow), React creates a lightweight Virtual DOM (a JavaScript object).
When a component's state or props change:
1Ô∏è‚É£ React creates a new Virtual DOM and compares it with the previous one using the Diffing Algorithm.
2Ô∏è‚É£ It finds the differences (minimal updates required) and efficiently updates only the necessary parts of the Real DOM‚Äîthis process is called Reconciliation.
This makes React fast, efficient, and optimized for performance.

# What is JSX?
JSX is a syntax extension for JavaScript that allows writing HTML-like code inside JS.
It makes React components more readable and easier to write.

 Why JSX?
Makes UI structure declarative and easier to visualize.
Babel transpiles it into React.createElement(), which creates the Virtual DOM representation.
Helps in writing cleaner, more maintainable React code.

‚úÖ JSX Rules & Best Practices
1Ô∏è‚É£ JSX must have a single parent element (wrap multiple elements in <>...</> or <div>...</div>).
2Ô∏è‚É£ Use {} to embed JavaScript expressions inside JSX (<h1>{2 + 2}</h1>).
3Ô∏è‚É£ Use className instead of class, since class is a reserved JS keyword.
4Ô∏è‚É£ All tags must be properly closed (<br />, <img src="" />).
5Ô∏è‚É£ Event handlers use camelCase (onClick instead of onclick).

JSX makes React more intuitive and developer-friendly, but ultimately, it's just JavaScript! üöÄ


# What is a Functional Component?
A functional component is a JavaScript function that returns JSX. It is the simplest way to create a component in React.

Key Characteristics
1Ô∏è‚É£ Must start with a capital letter (React treats lowercase as HTML tags).
2Ô∏è‚É£ Returns JSX (or null).
3Ô∏è‚É£ Reusable & composable (can be used inside other components).
4Ô∏è‚É£ No this keyword, unlike class components.
5Ô∏è‚É£ Pure functions ‚Äì They take props as input and return JSX without side effects.

 Component Composition (Using Components Inside Components)

# Props in React:

1Ô∏è‚É£ Props are properties that are passed to a component.
2Ô∏è‚É£ They are passed from parent to child (one-way data flow).
3Ô∏è‚É£ Parent = The component that contains another component.
4Ô∏è‚É£ Child = The component that receives the props.
5Ô∏è‚É£ Props are passed as attributes inside JSX.
6Ô∏è‚É£ Props are immutable ‚Üí The child component cannot modify the props it receives.
7Ô∏è‚É£ We can destructure props to make the code cleaner.










